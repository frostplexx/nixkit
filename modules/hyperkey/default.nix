{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.hyperkey;
  
  hyperkey = pkgs.stdenv.mkDerivation {
    name = "hyperkey";
    src = ./.; # This directory should contain hyperkey.swift and build.sh
    
    buildInputs = with pkgs; [
      darwin.apple_sdk.frameworks.Cocoa
      darwin.apple_sdk.frameworks.Carbon
      swift
    ];
    
    buildPhase = ''
      chmod +x build.sh
      ./build.sh
    '';
    
    installPhase = ''
      mkdir -p $out/bin
      cp hyperkey $out/bin/
    '';
    
    meta = {
      description = "A utility to remap Caps Lock to the Hyper key";
      platforms = platforms.darwin;
    };
  };
  
  launchAgentConfig = {
    # ServiceDescription is supported, but Label is auto-generated by nix-darwin
    # ServiceDescription = "HyperKey - Remap Caps Lock to Hyper key";
    
    # Program property is not needed when using ProgramArguments
    ProgramArguments = [
      "${hyperkey}/bin/hyperkey"
    ] 
    ++ (if !cfg.normalQuickPress then ["--no-quick-press"] else [])
    ++ (if cfg.includeShift then ["--include-shift"] else []);
    
    RunAtLoad = true;
    KeepAlive = true;  # Use KeepRunning instead of KeepAlive
    
    # ProcessType not supported in nix-darwin, removing
    # ThrottleInterval not supported in nix-darwin, removing
  };
in {
  options.services.hyperkey = {
    enable = mkEnableOption "HyperKey service that remaps Caps Lock to Hyper key";
    
    normalQuickPress = mkOption {
      type = types.bool;
      default = true;
      description = ''
        If enabled, a quick press of the Caps Lock key will send an Escape key.
        If disabled, it will only act as the Hyper key.
      '';
    };
    
    includeShift = mkOption {
      type = types.bool;
      default = false;
      description = ''
        If enabled, the Hyper key will include the Shift modifier (Cmd+Ctrl+Alt+Shift).
        If disabled, it will only include Cmd+Ctrl+Alt.
      '';
    };
  };
  
  config = mkIf cfg.enable {
    environment.systemPackages = [ hyperkey ];
    
    launchd.user.agents.hyperkey.serviceConfig = launchAgentConfig;
    
    system.activationScripts.postActivation.text = ''
      # Ensure hyperkey has the required permissions
      echo "NOTE: HyperKey requires accessibility permissions."
      echo "      You may need to grant them in System Preferences → Security & Privacy → Privacy → Accessibility"
    '';
  };
}
